Question: Given an encoded string s, the task is to decode it. The encoding rule is :

k[encodedString], where the encodedString inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer, and encodedString contains only lowercase english alphabets.
Note: The test cases are generated so that the length of the output string will never exceed 105 .

code:
class Solution {
public:
    string decodedString(string &s) {
        // Initialize an empty string to hold the final decoded result
        string ans;
        int n = s.size(); // Get the size of the input string
        stack<char> st; // Create a stack to help with decoding

        // Iterate through each character in the input string
        for (char c : s) {
            if (c != ']') {
                // If the character is not ']', push it onto the stack
                st.push(c);
            } else {
                // If the character is ']', we need to decode the substring
                string temp = ""; // Temporary string to hold the substring
                // Pop characters from the stack until we find '['
                while (!st.empty() && st.top() != '[') {
                    temp = st.top() + temp; // Reverse the order of characters
                    st.pop(); // Remove the character from the stack
                }
                st.pop(); // Pop the '[' from the stack

                string k = ""; // String to hold the number of repetitions
                // Pop characters from the stack to get the number (count)
                while (!st.empty() && isdigit(st.top())) {
                    k = st.top() + k; // Reverse the order of digits
                    st.pop(); // Remove the digit from the stack
                }
                int count = stoi(k); // Convert the string to an integer

                string repeat = ""; // String to hold the repeated substring
                // Repeat the decoded substring 'count' times
                while (count--) {
                    repeat += temp; // Append the substring to the repeat string
                }

                // Push each character of the repeated string back onto the stack
                for (char i : repeat) {
                    st.push(i);
                }
            }
        }

        // Construct the final decoded string by popping all characters from the stack
        while (!st.empty()) {
            ans = st.top() + ans; // Reverse the order again
            st.pop(); // Remove the character from the stack
        }
        return ans; // Return the fully decoded string
    }
};
