question: Given a string s, count all palindromic sub-strings present in the string. The length of the palindromic sub-string must be greater than or equal to 2.

Note: A substring is palindromic if it reads the same forwards and backwards.

code:

class Solution {
public:
    // Function to count the number of palindromic substrings in the given string s
    int countPS(string &s) {
        // Initialize a counter for palindromic substrings
        int ct = 0;

        // Loop through each character in the string as a potential center of a palindrome
        for (int i = 0; i < s.size(); i++) {
            // Check for odd-length palindromes centered at s[i]
            for (int j = 1; i - j >= 0 && i + j < s.size(); j++) {
                // If characters on both sides of the center are equal, we have a palindrome
                if (s[i - j] != s[i + j]) break; // Break if characters don't match
                ct++; // Increment the count of palindromes found
            }

            // Check for even-length palindromes centered between s[i] and s[i+1]
            for (int j = 1; i - j + 1 >= 0 && i + j < s.size(); j++) {
                // If characters on both sides are equal, we have a palindrome
                if (s[i - j + 1] != s[i + j]) break; // Break if characters don't match
                ct++; // Increment the count of palindromes found
            }
        }

        // Return the total count of palindromic substrings
        return ct;
    }
};
