Question: The stock span problem is a financial problem where we have a series of daily price quotes for a stock and we need to calculate the span of stock price for all days. The span arr[i] of the stocks price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the given day is less than or equal to its price on the current day.

code:

class Solution {
  public:
    // Function to calculate the span of stock prices
    vector<int> calculateSpan(vector<int>& arr) {
        // Create a stack to store indices of the stock prices
        stack<int> st;
        // Vector to store the span values
        vector<int> ans;
        // Get the number of stock prices
        int n = arr.size();
        
        // Iterate through each stock price
        for(int i = 0; i < n; i++) {
            // Pop elements from the stack while the current price is greater than
            // or equal to the price at the index stored at the top of the stack
            while(!st.empty() && arr[st.top()] <= arr[i]) {
                st.pop();
            }
            // If the stack is empty, it means the current price is greater than
            // all previous prices, so the span is i + 1 (all previous days)
            if(st.empty()) {
                ans.push_back(i + 1);
            } 
            // Otherwise, the span is the difference between the current index
            // and the index of the last higher price
            else {
                ans.push_back(i - st.top());
            }
            // Push the current index onto the stack
            st.push(i);
        }
        // Return the calculated spans
        return ans;
    }
}
