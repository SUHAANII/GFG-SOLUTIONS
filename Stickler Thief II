question: You are given an array arr[] which represents houses arranged in a circle, where each house has a certain value. A thief aims to maximize the total stolen value without robbing two adjacent houses.
Determine the maximum amount the thief can steal.

Note: Since the houses are in a circle, the first and last houses are also considered adjacent.

code:

// Declare a 2D vector for dynamic programming (dp) table
vector<vector<int>> dp;

// Function to solve the problem using recursion and memoization
int solve(vector<int>& arr, int start, int end, bool flag) {
    // Base case: if the start index exceeds the end index, return 0
    if (start > end) return 0;

    // Check if the result for this state has already been computed
    // dp[start][flag] stores the maximum amount that can be stolen
    if (dp[start][flag] != -1) return dp[start][flag];

    // Initialize two variables to store the maximum amounts for two scenarios
    int a = 0, b = 0;

    // If the current flag is false or if we are at the last house (start == end)
    if (!flag || start != end) {
        // Option 1: Steal from the current house (arr[start]) and move to the next non-adjacent house
        a = arr[start] + solve(arr, start + 2, end, start == 0 ? true : flag);
    }

    // Option 2: Skip the current house and move to the next house
    b = solve(arr, start + 1, end, flag);

    // Store the maximum amount that can be stolen in the dp table for this state
    return dp[start][flag] = max(a, b);
}
