question: You are given an array arr[] of non-negative numbers. Each number tells you the maximum number of steps you can jump forward from that position.

For example:

If arr[i] = 3, you can jump to index i + 1, i + 2, or i + 3 from position i.
If arr[i] = 0, you cannot jump forward from that position.
Your task is to find the minimum number of jumps needed to move from the first position in the array to the last position.

Note:  Return -1 if you can't reach the end of the array.

code:

class Solution {
public:
    int minJumps(vector<int>& arr) {
        // Get the size of the array
        int n = arr.size();

        // If there's only one element, no jumps are needed
        if (n == 1) return 0; 

        // If the first element is 0, we can't move anywhere
        if (arr[0] == 0) return -1; 

        // Initialize variables
        int maxReach = arr[0];  // Farthest point we can reach with the current jump
        int stepEnd = arr[0];   // The end of the range for the current jump
        int jumps = 1;          // Start with 1 jump since we're moving from the first element

        // Iterate through the array starting from the second element
        for (int i = 1; i < n; ++i) {
            // If we've reached the last element, return the number of jumps
            if (i == n - 1) return jumps;

            // Update the farthest point we can reach from the current index
            maxReach = max(maxReach, i + arr[i]);

            // If we've reached the end of the current jump range
            if (i == stepEnd) {
                jumps++;             // We need to make another jump
                stepEnd = maxReach;  // Set the end of the next jump's range

                // If the next jump's range can reach or go beyond the last element
                if (stepEnd >= n - 1) return jumps;
            }
            
            // If we can't move further (i is beyond the maximum reach), return -1
            if (i >= maxReach) return -1;
        }

        // If no solution is found, return -1
        return -1;  
    }
};
