Question: Given an incomplete Sudoku configuration in terms of a 9x9  2-D interger square matrix, mat[][], the task is to solve the Sudoku. It is guaranteed that the input Sudoku will have exactly one solution.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Note: Zeros represent blanks to be filled with numbers 1-9, while non-zero cells are fixed and cannot be changed.

code: 
bool solved(vector<vector<int>> &mat, int r, int c, vector<vector<bool>> &rows, vector<vector<bool>> &cols, vector<vector<vector<bool>>> &box) {
    // Move to the next row if we reach the end of the current row (c == 9)
    if (c == 9)
        return solved(mat, r + 1, 0, rows, cols, box);
    
    // If we have filled all rows (r == 9), the Sudoku is solved
    if (r == 9)
        return true;
    
    // If the current cell is not vacant (mat[r][c] != 0), move to the next column
    if (mat[r][c] != 0)
        return solved(mat, r, c + 1, rows, cols, box);
    
    // Try placing numbers 1 to 9 in the current vacant cell
    for (int k = 1; k < 10; k++) {
        // Check if k is already in the current row, column, or 3x3 box
        if (rows[r][k] || cols[c][k] || box[r / 3][c / 3][k])
            continue;  // Skip if k is already present
        
        // Mark k as present in the current row, column, and 3x3 box
        rows[r][k] = true;
        cols[c][k] = true;
        box[r / 3][c / 3][k] = true;
        
        // Set the current cell to k
        mat[r][c] = k;
        
        // Recursively attempt to solve the Sudoku with the current configuration
        if (solved(mat, r, c + 1, rows, cols, box))
            return true;  // If solved, return true
        
        // If placing k didn't lead to a solution, backtrack:
        // Reset the presence of k in the current row, column, and box
        rows[r][k] = false;
        cols[c][k] = false;
        box[r / 3][c / 3][k] = false;
    }
    
    // Reset the current cell if no number from 1 to 9 worked
    mat[r][c] = 0;
    return false;  // Return false as this path didn't lead to a solution
}
