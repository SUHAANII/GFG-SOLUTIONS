Question: You are given a histogram represented by an array arr, where each element of the array denotes the height of the bars in the histogram. All bars have the same width of 1 unit.

Your task is to find the largest rectangular area possible in the given histogram, where the rectangle can be formed using a number of contiguous bars.

code:

class Solution {
public:
    int getMaxArea(vector<int> &arr) {
        // Get the number of bars in the histogram
        int l = arr.size();
        // Variable to keep track of the maximum area found
        int area = 0;
        // Stack to store indices of the histogram bars
        stack<int> st;

        // Iterate through each bar in the histogram
        for (int i = 0; i < l; i++) {
            // While the stack is not empty and the current bar is shorter than the bar at the index on the top of the stack
            while (!st.empty() && arr[st.top()] > arr[i]) {
                // Get the height of the bar at the index on the top of the stack
                int height = arr[st.top()];
                // Remove the index from the stack
                st.pop();
                // Calculate the width of the rectangle formed with 'height'
                // If the stack is empty, it means the popped height was the smallest so far
                // Hence, the width is 'i' (current index)
                // Otherwise, the width is the difference between the current index and the index on the new top of the stack minus one
                int width = (st.empty()) ? i : i - st.top() - 1;
                // Update the maximum area if the new area is larger
                area = max(area, height * width);
            }
            // Push the current index onto the stack
            st.push(i);
        }

        // Now, handle the remaining bars in the stack
        while (!st.empty()) {
            // Get the height of the bar at the index on the top of the stack
            int height = arr[st.top()];
            // Remove the index from the stack
            st.pop();
            // Calculate the width of the rectangle formed with 'height'
            // If the stack is empty, it means all bars to the left are shorter, so width is 'l' (total length)
            // Otherwise, the width is the difference between the total length and the index on the new top of the stack minus one
            int width = (st.empty()) ? l : l - st.top() - 1;
            // Update the maximum area if the new area is larger
            area = max(area, height * width);
        }

        // Return the maximum area found
        return area;
    }
};

