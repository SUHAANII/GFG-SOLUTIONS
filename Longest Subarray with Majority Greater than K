question: Given an array arr[] and an integer k, the task is to find the length of longest subarray in which the count of elements greater than k is more than the count of elements less than or equal to k.

code:

class Solution {
public:
    int longestSubarray(vector<int> &arr, int k) {
        // Initialize counters and a map to track indices
        int c = 0; // Counter for the number of elements greater than k
        int ans = 0; // Variable to store the length of the longest valid subarray
        unordered_map<int, int> m; // Map to store the first occurrence of each counter value

        // Iterate through each element in the array
        for (int i = 0; i < arr.size(); i++) {
            // If the current element is less than or equal to k, decrement the counter
            if (arr[i] <= k) 
                c--; // We treat elements <= k as -1
            else 
                c++; // We treat elements > k as +1

            // If the counter is non-positive and this counter value hasn't been seen before
            if (c <= 0 && !m.count(c)) 
                m[c] = i; // Store the index of the first occurrence of this counter value

            // If the counter is non-positive and we have seen (c-1) before
            if (c <= 0 && m.count(c - 1)) 
                ans = max(ans, i - m[c - 1]); // Update the longest length found

            // If the counter is positive, it means we have more elements > k than <= k
            if (c > 0) 
                ans = i + 1; // The entire subarray from the start to current index is valid
        }

        return ans; // Return the length of the longest valid subarray
    }
};
