Question: You are given two arrays: deadline[], and profit[], which represent a set of jobs, where each job is associated with a deadline, and a profit. Each job takes 1 unit of time to complete, and only one job can be scheduled at a time. You will earn the profit associated with a job only if it is completed by its deadline.

Your task is to find:

The maximum number of jobs that can be completed within their deadlines.
The total maximum profit earned by completing those jobs.


code;

class Solution {
public:
    // Comparator function to sort pairs based on profit in descending order
    bool static comp(pair<int, int>& a, pair<int, int>& b) {
        return a.first > b.first; // Return true if profit of 'a' is greater than that of 'b'
    }

    // Function to perform job sequencing
    vector<int> jobSequencing(vector<int> &deadline, vector<int> &profit) {
        // Get the number of jobs (size of profit array)
        int n = profit.size();
        
        // Vector to hold pairs of profit and corresponding deadlines
        vector<pair<int, int>> v;

        // Fill the vector with pairs of (profit, deadline)
        for (int i = 0; i < n; i++) {
            v.push_back({profit[i], deadline[i]});
        }

        // Sort the vector of pairs based on profit in descending order
        sort(v.begin(), v.end(), comp);

        // Temporary array to track filled time slots
        vector<int> tmp(n + 1, -1); // Initialize with -1 (indicating free slots)

        int ans = 0; // Variable to store total profit
        int cnt = 0; // Variable to count the number of jobs done

        // Loop through each job in sorted order
        for (int i = 0; i < n; i++) {
            int ind = v[i].second; // Get the deadline of the current job
            
            // Find a free slot for the job, starting from its deadline
            while (ind >= 1 && tmp[ind] >= 0) {
                ind--; // Move to the previous slot if it's already filled
            }
            
            // If a free slot is found
            if (ind >= 1 && tmp[ind] < 0) {
                cnt++; // Increment the count of jobs done
                ans += v[i].first; // Add the profit of the job to total profit
                tmp[ind] = v[i].second; // Mark this time slot as filled with the job's deadline
            }
        }
        
        // Return the count of jobs done and the total profit
        return {cnt, ans};
    }
};
