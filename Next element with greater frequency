question: Given an array arr[] of integers, for each element, find the closest (distance wise) to its right that has a higher frequency than the current element.
If no such element exists, return -1 for that position.

code:

class Solution {
public:
    vector<int> findGreater(vector<int>& arr) {
        // Get the size of the input array
        int n = arr.size();
        
        // Create a frequency map to count occurrences of each element
        map<int, int> freq;

        // Populate the frequency map with counts of each element in arr
        for (auto it : arr) {
            freq[it]++;
        }
        
        // Initialize a result vector with -1, which will hold the final output
        vector<int> res(n, -1);
        
        // Stack to keep track of indices for elements being processed
        stack<int> s;

        // Loop through each element in the array
        for (int i = 0; i < n; i++) {
            // While the stack is not empty and the current element's frequency
            // is greater than the frequency of the element at the index stored
            // at the top of the stack
            while (!s.empty() && freq[arr[i]] > freq[arr[s.top()]]) {
                // Set the result for the index at the top of the stack to the
                // current element since it is greater in frequency
                res[s.top()] = arr[i];
                // Pop the index from the stack as we've found a greater frequency
                s.pop();
            }
            // Push the current index onto the stack for future comparison
            s.push(i);
        }
        
        // Return the result vector containing the next greater frequency elements
        return res;
    }
};
