question: You are given an array arr[] of positive integers, where each element arr[i] represents the number written on the i-th ball, and a positive integer k.
Your task is to determine whether it is possible to rearrange all the balls into groups such that:


Each group contains exactly k balls.
The numbers in each group are consecutive integers

code:

class Solution {
public:
    // Function to check if a valid group can be formed
    bool validgroup(vector<int> &arr, int k) {
        // Create a map to count the frequency of each element
        map<int, int> mpp;
        // Create a set to store unique elements from the array
        set<int> st;

        // Populate the frequency map and the set with elements from the array
        for(int i = 0; i < arr.size(); i++) {
            mpp[arr[i]]++; // Increment the frequency of the current element
            st.insert(arr[i]); // Insert the element into the set for uniqueness
        }

        // Iterate through each unique element in the set
        for(auto it : st) {
            int freq = mpp[it]; // Get the frequency of the current element
            if(freq == 0) continue; // If the frequency is zero, skip to the next element

            // For each element from 'it' to 'it + k - 1'
            for(int j = it; j < it + k; j++) {
                // Check if the frequency of the current element in the map is less than 'freq'
                if(mpp[j] < freq) return false; // If yes, return false (not a valid group)
                else {
                    mpp[j] -= freq; // Reduce the frequency of the current element by 'freq'
                }
            }
        }
        return true; // If all checks passed, return true (valid group can be formed)
    }
};
