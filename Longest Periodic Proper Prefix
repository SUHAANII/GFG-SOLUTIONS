question: Given a string s, find the length of longest periodic proper prefix of s. If no such prefix exists, return -1.
A periodic proper prefix is a non empty prefix of s (but not the whole string), such that repeating this prefix enough times produces a string that starts with s.

code:

class Solution {
public:
    // Function to get the length of the longest prefix which is also a suffix
    int getLongestPrefix(string &s) {
        int n = s.size(); // Get the length of the input string
        vector<int> z(n, 0); // Initialize a Z-array to store Z-values

        // Compute the Z-function
        for (int i = 1, l = 0, r = 0; i < n; i++) {
            // If i is within the range of the rightmost matched substring
            if (i <= r) 
                z[i] = min(r - i + 1, z[i - l]); // Use previously computed Z-values

            // Attempt to extend the match
            while (i + z[i] < n && s[z[i]] == s[i + z[i]]) 
                z[i]++; // Increment Z-value if characters match

            // Update the left and right boundaries if we found a longer match
            if (i + z[i] - 1 > r) {
                l = i; // Update left boundary
                r = i + z[i] - 1; // Update right boundary
            }
        }

        // Check lengths from largest to smallest
        for (int len = n - 1; len >= 1; len--) {
            bool ok = true; // Flag to check if the current length is valid
            // Check if the prefix of length 'len' can repeat to form the string
            for (int i = len; i < n; i += len) {
                // If the Z-value at position i is less than the minimum of 'len' or the remaining length
                if (z[i] < min(len, n - i)) { 
                    ok = false; // Mark as invalid
                    break; // Exit the loop
                }
            }
            // If a valid length was found, return it
            if (ok) return len;
        }
        
        return -1; // Return -1 if no valid prefix found
    }
};
