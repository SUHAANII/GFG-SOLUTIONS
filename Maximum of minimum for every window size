Question: Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().

code:

class Solution {
public:
    vector<int> maxOfMins(vector<int>& arr) {
        // Initialize two stacks for tracking indices
        stack<int> leftStack;  // For finding the nearest smaller element on the left
        stack<int> rightStack; // For finding the nearest smaller element on the right
        int n = arr.size();    // Get the size of the input array
        vector<int> left(n, -1);  // Array to store indices of nearest smaller elements on the left
        vector<int> right(n, n);   // Array to store indices of nearest smaller elements on the right
        
        // Finding left limits
        for (int i = 0; i < n; i++) {
            // While the stack is not empty and the current element is less than or equal to the element at the index on top of the stack
            while (!leftStack.empty() && arr[i] <= arr[leftStack.top()]) {
                leftStack.pop(); // Pop the index from the stack
            }
            // If the stack is empty, there is no smaller element on the left
            // Otherwise, set the left[i] to the index of the nearest smaller element
            left[i] = leftStack.empty() ? -1 : leftStack.top();
            leftStack.push(i); // Push the current index onto the stack
        }
        
        // Finding right limits
        for (int i = n - 1; i >= 0; i--) {
            // While the stack is not empty and the current element is less than or equal to the element at the index on top of the stack
            while (!rightStack.empty() && arr[i] <= arr[rightStack.top()]) {
                rightStack.pop(); // Pop the index from the stack
            }
            // If the stack is empty, there is no smaller element on the right
            // Otherwise, set the right[i] to the index of the nearest smaller element
            right[i] = rightStack.empty() ? n : rightStack.top();
            rightStack.push(i); // Push the current index onto the stack
        }
        
        vector<int> ans(n, 0); // Initialize the answer array to store maximum of minimums for each window size
        // Fill the answer array
        for (int i = 0; i < n; i++) {
            // Calculate the size of the window where arr[i] is the minimum
            int windowSize = right[i] - left[i] - 1; 
            // Update the answer for this window size with the maximum value
            ans[windowSize - 1] = max(ans[windowSize - 1], arr[i]);
        }
        
        // Propagate the maximum values to ensure each index has the maximum of all minimums for that window size
        for (int i = n - 2; i >= 0; i--) {
            ans[i] = max(ans[i], ans[i + 1]);
        }
        
        return ans; // Return the final answer array
    }
};
