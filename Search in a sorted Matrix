Question: Given a strictly sorted 2D matrix mat[][] of size n x m and a number x. Find whether the number x is present in the matrix or not.
Note: In a strictly sorted matrix, each row is sorted in strictly increasing order, and the first element of the ith row (i!=0) is greater than the last element of the (i-1)th row.

code: 
class Solution {
public:
    // Function to search a given number in a row-column sorted matrix.
    bool searchMatrix(vector<vector<int>> &mat, int x) {
        // Get the number of rows in the matrix
        int m = mat.size(); 
        // Get the number of columns in the matrix
        int n = mat[0].size(); 
        
        // If there are no columns, return false
        if (n == 0) {
            return false;
        }

        // Iterate through each row of the matrix
        for (int i = 0; i < m; i++) {
            // Initialize binary search boundaries for the current row
            int low = 0, high = n - 1;

            // Perform binary search in the current row
            while (low <= high) {
                // Calculate the middle index
                int mid = low + (high - low) / 2;

                // Check if the middle element is the target
                if (mat[i][mid] == x) {
                    return true; // Target found
                }
                // If the middle element is greater than the target
                else if (mat[i][mid] > x) {
                    high = mid - 1; // Search in the left half
                }
                // If the middle element is less than the target
                else {
                    low = mid + 1; // Search in the right half
                }
            }
        }
        // If the target is not found in any row, return false
        return false;
    }
};
