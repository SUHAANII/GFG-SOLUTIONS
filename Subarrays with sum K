Question: Given an unsorted array of integers, find the number of continuous subarrays having sum exactly equal to a given number k.

code:
class Solution {
public:
    int countSubarrays(vector<int> &arr, int k) {
//prefsum keeps a running total of the elements in the array as you iterate through it. This allows you to calculate the sum of any subarray quickly by utilizing the properties of prefix sums.
        // Initialize a variable to store the prefix sum
        int prefsum = 0;
        // Initialize a counter to keep track of the number of subarrays
        int count = 0;
        // Create a hash map to store the frequency of prefix sums
        unordered_map<int, int> mp;
        // Initialize the map with the prefix sum of 0 (to handle cases where the sum equals k)
        mp[0] = 1;

        // Iterate through each element in the array
        for(int i = 0; i < arr.size(); i++) {
            // Update the prefix sum by adding the current element
            prefsum += arr[i];
            // Check if there exists a prefix sum that, when subtracted from the current prefix sum,
            // equals k. If so, add its frequency to the count.
            count += mp[prefsum - k];
            // Increment the frequency of the current prefix sum in the map
            mp[prefsum]++;
        }
        // Return the total count of subarrays whose sum equals k
        return count;
    }
};

