Question: Given a Binary Tree, your task is to return its In-Order Traversal.

An inorder traversal first visits the left child (including its entire subtree), then visits the node, and finally visits the right child (including its entire subtree).

Follow Up: Try solving this with O(1) auxiliary space.

code:

class Solution {
  public:
    // Function to return a list containing the inorder traversal of the tree.
    vector<int> inorder(Node* root) {
        vector<int> result;
        inorderHelper(root, result);
        return result;
    }

  private:
    void inorderHelper(Node* root, vector<int>& result) {
        if(root == NULL) {
            return;
        }
        inorderHelper(root->left, result);
        result.push_back(root->data);  // Store node data instead of printing
        inorderHelper(root->right, result);
    }
};
