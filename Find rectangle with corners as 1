question: Given an n x m binary matrix mat[][] containing only 0s and 1s, determine if there exists a rectangle within the matrix such that all four corners of the rectangle are 1. If such a rectangle exists, return true; otherwise, return false.


code:

class Solution {
public:
    // Function to check if there exists at least one valid corner in the matrix
    bool ValidCorner(vector<vector<int>>& mat) {
        // Get the number of rows (n) and columns (m) in the matrix
        const int n = mat.size(), m = mat[0].size();
        
        // Iterate over each pair of rows in the matrix
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                int twos = 0; // Counter for the number of columns where both rows have a 1
                
                // Check each column for the current pair of rows
                for(int k = 0; k < m; k++) {
                    // If both rows have a 1 in the current column, increment the counter
                    if(mat[i][k] == 1 && mat[j][k] == 1) {
                        twos++;
                    }
                }
                
                // If there are at least 2 columns where both rows have a 1, return true
                if(twos >= 2) return true;
            }
        }
        
        // If no such pair of rows is found, return false
        return false;
    }
};
