question: Koko is given an array arr[], where each element represents a pile of bananas. She has exactly k hours to eat all the bananas.

Each hour, Koko can choose one pile and eat up to s bananas from it.

If the pile has atleast s bananas, she eats exactly s bananas.

If the pile has fewer than s bananas, she eats the entire pile in that hour.

Koko can only eat from one pile per hour.


Your task is to find the minimum value of s (bananas per hour) such that Koko can finish all the piles within k hours.

code:

class Solution {
public:
    // Function to determine the minimum eating speed
    int kokoEat(vector<int>& arr, int k) {
        // Get the size of the array
        int n = arr.size();
        
        // Initialize left (l) to 1 (minimum speed) and right (r) to the maximum value in arr
        int l = 1;
        int r = *max_element(arr.begin(), arr.end()); // Use max_element to find the maximum in arr
        int ans = r; // Initialize answer to the maximum speed

        // Perform binary search to find the minimum eating speed
        while(l <= r) {
            // Calculate the mid-point of the current range
            int mid = l + (r - l) / 2; // Avoids overflow
            
            int hour = 0; // Counter for the total hours needed at speed mid
            
            // Calculate the total hours needed if Koko eats at speed mid
            for(int i = 0; i < n; i++) {
                // Calculate hours required for the current pile
                hour += ceil(arr[i] / (1.0 * mid)); // Use 1.0 to ensure floating-point division
                
                // If hours exceed k, no need to continue checking
                if(hour > k) break; 
            }
            
            // If the total hours needed is less than or equal to k
            if(hour <= k) {
                ans = min(ans, mid); // Update answer to the minimum speed found
                r = mid - 1; // Try a smaller speed (move right boundary down)
            } else {
                l = mid + 1; // Increase speed (move left boundary up)
            }
        }
        
        // Return the minimum speed required
        return ans;
    }
};
