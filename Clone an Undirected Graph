question: Given a connected undirected graph represented by adjacency list, adjList[][] with n nodes, having a distinct label from 0 to n-1, where each adj[i] represents the list of vertices connected to vertex i.

Create a clone of the graph, where each node in the graph contains an integer val and an array (neighbors) of nodes, containing nodes that are adjacent to the current node.

class Node {
    val: integer
    neighbors: List[Node]
}
Your task is to complete the function cloneGraph( ) which takes a starting node of the graph as input and returns the copy of the given node as a reference to the cloned graph.


code:

class Solution {
public:
    Node* cloneGraph(Node* node) {
        // Check if the input node is null; if so, return null (base case)
        if (node == nullptr) return nullptr;

        // Create a map to store the original nodes and their corresponding cloned nodes
        unordered_map<Node*, Node*> mp;

        // Create a new node for the cloned graph with the same value as the original node
        Node* newNode = new Node(node->val);
        // Map the original node to the new cloned node
        mp[node] = newNode;

        // Create a queue to facilitate breadth-first traversal of the graph
        queue<Node*> q;
        // Start the traversal with the original node
        q.push(node);

        // Begin the breadth-first search (BFS) loop
        while (!q.empty()) {
            // Get the front node from the queue
            Node* cur = q.front();
            // Remove the front node from the queue
            q.pop();

            // Iterate through each neighbor of the current node
            for (Node* neighbor : cur->neighbors) {
                // If the neighbor hasn't been cloned yet
                if (mp.find(neighbor) == mp.end()) {
                    // Clone the neighbor and map it to the new node
                    mp[neighbor] = new Node(neighbor->val);
                    // Add the neighbor to the queue for further processing
                    q.push(neighbor);
                }
                // Add the cloned neighbor to the neighbors of the cloned current node
                mp[cur]->neighbors.push_back(mp[neighbor]);
            }
        }

        // Return the new cloned graph starting from the new node
        return newNode;
    }
};
