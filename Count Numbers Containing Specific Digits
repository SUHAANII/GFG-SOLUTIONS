question: You are given an integer n representing the number of digits in a number, and an array arr[] containing digits from 0 to 9. Your have to count how many n-digit positive integers can be formed such that at least one digit from the array arr[] appears in the number.
code:
class Solution {
public:
    int countValid(int n, vector<int>& arr) {
        // Initialize the total number of n-digit numbers
        int totalNum = 1;

        // Calculate the total number of n-digit numbers
        for(int i = 1; i <= n; i++) {
            if(i == 1) {
                // For the first digit, it can be from 1 to 9 (9 options)
                totalNum = totalNum * 9;
            } else {
                // For subsequent digits, it can be from 0 to 9 (10 options)
                totalNum = totalNum * 10;
            }
        }

        // Get the number of digits in the 'arr' vector
        int digits = arr.size();
        // Initialize the count of n-digit numbers that do not contain any of the digits in 'arr'
        int not_containing = 1;

        // Calculate the number of n-digit numbers that do not contain the digits in 'arr'
        for(int i = 1; i <= n; i++) {
            if(i == 1) {
                // For the first digit, if it cannot be 0, we have to adjust the count
                if(arr[0] == 0) {
                    // If the first digit is 0, we can choose from 1-9 excluding the digits in 'arr'
                    not_containing = not_containing * (9 - digits + 1);
                } else {
                    // If the first digit is not 0, we can choose from 1-9 excluding the digits in 'arr'
                    not_containing = not_containing * (10 - digits - 1);
                }
            } else {
                // For subsequent digits, we can choose from 0-9 excluding the digits in 'arr'
                not_containing = not_containing * (10 - digits);
            }
        }

        // Return the valid n-digit numbers by subtracting the count of those that do not contain the digits in 'arr'
        return totalNum - not_containing;
    }
};
