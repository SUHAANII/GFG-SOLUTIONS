Question: Given a data stream arr[] where integers are read sequentially, the task is to determine the median of the elements encountered so far after each new integer is read.

There are two cases for median on the basis of data set size.

1. If the data set has an odd number then the middle one will be consider as median.
2. If the data set has an even number then there is no distinct middle value and the median will be the arithmetic mean of the two middle values.

code:
vector<double> ans; // Vector to store the result
multiset<int> s;    // Multiset to maintain a sorted collection of elements
auto it = s.begin(); // Iterator to track the current position in the multiset

// Loop through each element in the input array
for (int i = 0; i < arr.size(); i++){
    s.insert(arr[i]); // Insert the current element into the multiset

    // Initialize the iterator for the first element
    if (i == 0) 
        it = s.begin();  
    // Move the iterator forward if the current element is greater than or equal to the current median
    // and the index is even (0-based)
    else if (arr[i] >= *it && i % 2 == 0) 
        ++it;  
    // Move the iterator backward if the current element is less than the current median
    // and the index is odd (0-based)
    else if (arr[i] < *it && i % 2 == 1) 
        --it;  

    // If the index is even, add the current median to the result
    if (i % 2 == 0){
        ans.push_back((double)(*it));  
    } 
    // If the index is odd, calculate the average of the current median and the next element
    else{
        auto nextIt = next(it); // Get the iterator to the next element
        ans.push_back((*it + *nextIt) / 2.0); // Calculate the average and add to the result
    }
}

return ans; // Return the vector containing the medians
