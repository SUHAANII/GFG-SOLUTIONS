question: You are given a string s and a list dictionary[] of words. Your task is to determine whether the string s can be formed by concatenating one or more words from the dictionary[].

Note: From dictionary[], any word can be taken any number of times and in any order.

code:

class Solution {
public:
    // Main function to determine if the string 's' can be segmented into words from the dictionary 'dic'
    bool wordBreak(string &s, vector<string> &dic) {
        // Get the length of the string 's' and the size of the dictionary 'dic'
        int n = s.size(), m = dic.size();
        
        // Create a dynamic programming (DP) array to store results for subproblems
        vector<int> dp(n + 1, 0);
        
        // Base case: an empty string can always be segmented
        dp[n] = 1;
        
        // Iterate backwards through the string 's'
        for (int i = n - 1; i >= 0; i--) {
            // Check each word in the dictionary
            for (int j = m - 1; j >= 0; j--) {
                int k = 0; // Variable to track the match length
                
                // Try to match the current dictionary word with the substring of 's'
                for (int l = i; l < n && k < dic[j].size(); l++) {
                    // If characters match, move to the next character in both strings
                    if (s[l] == dic[j][k]) {
                        k++;
                    } else {
                        // If characters do not match, break out of the loop
                        break;
                    }
                }
                
                // If the entire dictionary word was matched
                if (k == dic[j].size()) {
                    // Update the DP array: if we can segment the remaining string after the matched word
                    dp[i] |= dp[i + k];
                }
            }
        }
        
        // Return whether the entire string 's' can be segmented (starting from index 0)
        return dp[0];
    }
};
