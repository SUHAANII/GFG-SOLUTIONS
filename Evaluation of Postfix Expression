Question: You are given an array of strings arr that represents a valid arithmetic expression written in Reverse Polish Notation (Postfix Notation). Your task is to evaluate the expression and return an integer representing its value.

Key Details:

The valid operators are '+', '-', '*', and '/'.
Each operand is guaranteed to be a valid integer or another expression.
The division operation between two integers always rounds the result towards zero, discarding any fractional part.
No division by zero will occur in the input.
The input is a valid arithmetic expression in Reverse Polish Notation.
The result of the expression and all intermediate calculations will fit in a 32-bit signed integer.

code:
// Initialize a stack to hold integer values
stack<int> st;

// Get the size of the input array `arr`
int n = arr.size();

// Initialize an index variable to iterate through the array
int i = 0;

// Loop through each element in the array until the end
while (i < n) {
    // Get the current element as a string
    string x = arr[i];

    // Check if the current element is a number (either positive or negative)
    if (isdigit(x[0]) || (x[0] == '-' && x.size() > 1)) {
        // Convert the string to an integer and push it onto the stack
        int num = stoi(x);
        st.push(num);
    } else {
        // If the current element is an operator (+, -, *, /)
        
        // Pop the top two numbers from the stack
        int num2 = st.top(); // Second operand
        st.pop();            // Remove the top element from the stack
        int num1 = st.top(); // First operand
        st.pop();            // Remove the next top element from the stack
        
        // Variable to hold the result of the operation
        int newNum;

        // Perform the operation based on the current operator
        if (x == "*") {
            newNum = num1 * num2; // Multiplication
        } else if (x == "/") {
            newNum = num1 / num2; // Division
        } else if (x == "-") {
            newNum = num1 - num2; // Subtraction
        } else if (x == "+") {
            newNum = num1 + num2; // Addition
        }

        // Push the result back onto the stack
        st.push(newNum);
    }

    // Move to the next element in the array
    i++;
}

// Return the top element of the stack, which is the final result
return st.top();
