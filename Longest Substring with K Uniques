question: You are given a string s consisting only lowercase alphabets and an integer k. Your task is to find the length of the longest substring that contains exactly k distinct characters.

Note : If no such substring exists, return -1. 



code:
class Solution {
  public:
    int longestKSubstr(string &s, int k) {
        // code here
            // Initialize a hashmap to store character frequency
       unordered_map<char, int> charCount;
        int left = 0, maxLength = -1; // Start with maxLength as -1 to handle edge cases

        // Iterate through the string with the right pointer
        for (int right = 0; right < s.length(); ++right) {
            // Add the current character to the hashmap
            charCount[s[right]]++;

            // If we have more than k unique characters, shrink the window
            while (charCount.size() > k) {
                charCount[s[left]]--;
                if (charCount[s[left]] == 0) {
                    charCount.erase(s[left]);
                }
                left++;
            }

            // Update maxLength only if we have exactly k unique characters
            if (charCount.size() == k) {
                int currentLength = right - left + 1;
                maxLength = std::max(maxLength, currentLength);
            }
        }

        return maxLength; 
    }
};
