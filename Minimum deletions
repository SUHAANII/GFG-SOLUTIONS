questions: Given a string s, write a program to delete the minimum number of characters from the string so that the resultant string is a palindrome, while maintaining the order of characters.

code:

class Solution {
public:
    // Function to find the minimum number of deletions required to make the string a palindrome
    int minDeletions(string s) {
        // Get the length of the string
        int n = s.length();
        
        // Create a reversed version of the string
        string rev = s;
        reverse(rev.begin(), rev.end());

        // Create a 2D DP array to store lengths of longest palindromic subsequences
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));

        // Fill the DP table
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= n; ++j) {
                // If characters match, increment the count from the previous indices
                if (s[i - 1] == rev[j - 1]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    // Otherwise, take the maximum from either excluding the current character from s or rev
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        // The length of the longest palindromic subsequence
        int lps = dp[n][n];
        
        // Minimum deletions required to make the string a palindrome
        return n - lps;
    }
};
