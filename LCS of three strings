question: Given three strings s1, s2, and s3 containing uppercase letters, lowercase letters, and digits, find the length of longest common sub-sequence in all three given strings.



code:


class Solution {
  public:
    // Function to find the length of the longest common subsequence of three strings
    int lcsOf3(string& s1, string& s2, string& s3) {
        // Get the lengths of the input strings s1, s2, and s3
        int n1 = s1.length(), n2 = s2.length(), n3 = s3.length();
        
        // Create a 3D vector (dp) initialized to -1 to store results of subproblems
        vector<vector<vector<int>>> dp(n1, vector<vector<int>>(n2, vector<int>(n3, -1)));

        // Define a recursive function 'Solve' using a lambda function
        function<int(int, int, int)> Solve = [&](int i, int j, int k) -> int {
            // Base case: if any index goes out of bounds, return 0
            if (i >= n1 || j >= n2 || k >= n3) return 0;

            // Check if the result for this subproblem has already been computed
            if (dp[i][j][k] != -1) return dp[i][j][k];

            // If characters at the current indices are the same in all three strings
            if (s1[i] == s2[j] && s2[j] == s3[k]) {
                // Include this character in the count and move to the next indices
                return dp[i][j][k] = 1 + Solve(i + 1, j + 1, k + 1);
            } else {
                // If characters are not the same, explore all possible options
                // and take the maximum count from the three possible next states
                return dp[i][j][k] = max({
                    Solve(i + 1, j, k),   // Move to the next character in s1
                    Solve(i, j + 1, k),   // Move to the next character in s2
                    Solve(i, j, k + 1)    // Move to the next character in s3
                });
            }
        };

        // Start the recursive function from the beginning of all three strings
        return Solve(0, 0, 0);
    }
};
