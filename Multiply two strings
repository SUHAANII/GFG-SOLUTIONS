question: Given two numbers as strings s1 and s2. Calculate their Product.
Note: The numbers can be negative and You are not allowed to use any built-in function or convert the strings to integers. There can be zeros in the begining of the numbers. You don't need to specify '+' sign in the begining of positive numbers.


code:

class Solution {
public:
    /* You are required to complete below function */
    string multiplyStrings(string& s1, string& s2) {
        // Variable to track if the result should be negative
        bool neg = false;

        // Check if the first string is negative
        if (s1[0] == '-') {
            neg = !neg; // Toggle neg to true
            s1 = s1.substr(1); // Remove the negative sign
        }
        
        // Check if the second string is negative
        if (s2[0] == '-') {
            neg = !neg; // Toggle neg to true
            s2 = s2.substr(1); // Remove the negative sign
        }

        // Remove leading zeros from s1
        while (s1.size() > 1 && s1[0] == '0') s1.erase(s1.begin());
        // Remove leading zeros from s2
        while (s2.size() > 1 && s2[0] == '0') s2.erase(s2.begin());

        // If either string is "0", the result is "0"
        if (s1 == "0" || s2 == "0") return "0";

        int n = s1.size(); // Length of first string
        int m = s2.size(); // Length of second string

        // Resultant array to store the multiplication result
        vector<int> res(n + m, 0);

        // Multiply each digit of s1 with each digit of s2
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                // Multiply the current digits
                int mul = (s1[i] - '0') * (s2[j] - '0');
                // Add the multiplication result to the corresponding position in res
                int sum = mul + res[i + j + 1];
                // Update the carry and the current digit
                res[i + j] += sum / 10; // Carry to the next position
                res[i + j + 1] = sum % 10; // Current digit
            }
        }

        string ans; // Resultant string
        int i = 0;

        // Skip leading zeros in the result
        while (i < res.size() && res[i] == 0) i++;

        // Convert the result array to a string
        for (; i < res.size(); i++) ans.push_back(res[i] + '0');

        // If the result should be negative, prepend the negative sign
        if (neg) ans = "-" + ans;

        return ans; // Return the final result
    }
};
