Question: Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

code:

#include <limits.h>

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};

class Solution {
public:
    bool isBST(Node* root) {
        return isBSTUtil(root, LONG_MIN, LONG_MAX);
    }

private:
    bool isBSTUtil(Node* root, long min_val, long max_val) {
        if (root == nullptr) {
            return true;
        }
        if (root->data <= min_val || root->data >= max_val) {
            return false;
        }
        return isBSTUtil(root->left, min_val, root->data) &&
               isBSTUtil(root->right, root->data, max_val);
    }
};
