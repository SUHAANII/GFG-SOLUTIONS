question: Given an undirected graph with V vertices and E edges, represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge between vertices u and v, determine whether the graph contains a cycle or not.

code:

class Solution {
public:
    // Function to check if there is a cycle in the graph
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Create an adjacency list to represent the graph
        vector<vector<int>> adj(V);
        // Vector to keep track of visited nodes
        vector<bool> visited(V, false);        
        // Mark the first node as visited (starting point for DFS)
        visited[0] = true;
        
        // Build the adjacency list from the edges
        for(auto &i : edges) {
            int u = i[0], v = i[1];
            // Add the edge in both directions since the graph is undirected
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        // Define a lambda function for DFS
        function<bool(int, int)> dfs = [&](int curr, int prev) -> bool {
            bool res = false; // Variable to store if a cycle is found
            // Iterate through all adjacent nodes of the current node
            for(auto i : adj[curr]) {
                // If the adjacent node is visited and is not the parent, a cycle is found
                if(i != prev && visited[i] == true) return true;
                // If the adjacent node is not the parent
                else if(i != prev) {
                    visited[i] = true; // Mark the node as visited
                    // Recursively call DFS for the adjacent node
                    res |= dfs(i, curr);
                    // If a cycle is found in the recursive call, return true
                    if(res) return res;
                }
            }
            return res; // Return whether a cycle was found
        };
        
        // Start DFS from the first node (0) with no parent (-1)
        return dfs(0, -1);
    }
};
