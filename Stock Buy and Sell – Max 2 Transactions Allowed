question: In daily share trading, a trader buys shares and sells them on the same day. If the trader is allowed to make at most 2 transactions in a day, find out the maximum profit that a share trader could have made.

You are given an array prices[] representing stock prices throughout the day. Note that the second transaction can only start after the first one is complete (buy->sell->buy->sell).

code:

class Solution {
public:
    int maxProfit(vector<int> &prices) {
        // Create two vectors to hold the maximum profit values for the next and current states
        vector<int> next(5), curr(5);
        
        // Get the number of days (prices) available
        int n = prices.size();
        
        // Iterate backwards through the prices array
        for (int i = n - 1; i >= 0; i--) {
            // Iterate over the states (0 to 4), where j represents the state
            // j = 0, 1, 2, 3 represent the number of transactions (0 to 4 transactions)
            for (int j = 3; j >= 0; j--) {
                int profit = 0; // Initialize profit for the current state
                
                // Check if j is even or odd to determine whether we are buying or selling
                if (j % 2 == 0) {
                    // Even j: We are in a buying state (0, 2)
                    // Calculate profit if we buy today or keep the previous profit
                    profit = max(-prices[i] + next[j + 1], next[j]);
                } else {
                    // Odd j: We are in a selling state (1, 3)
                    // Calculate profit if we sell today or keep the previous profit
                    profit = max(prices[i] + next[j + 1], next[j]);
                }
                
                // Store the calculated profit for the current state
                curr[j] = profit;
            }
            // Move to the next state by copying current profits to next
            next = curr;
        }
        
        // Return the maximum profit starting from the initial state (0 transactions)
        return next[0];
    }
};
