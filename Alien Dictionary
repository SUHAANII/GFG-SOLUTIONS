question: A new alien language uses the English alphabet, but the order of letters is unknown. You are given a list of words[] from the alien language’s dictionary, where the words are claimed to be sorted lexicographically according to the language’s rules.

Your task is to determine the correct order of letters in this alien language based on the given words. If the order is valid, return a string containing the unique letters in lexicographically increasing order as per the new language's rules. If there are multiple valid orders, return any one of them.

However, if the given arrangement of words is inconsistent with any possible letter ordering, return an empty string ("").

A string a is lexicographically smaller than a string b if, at the first position where they differ, the character in a appears earlier in the alien language than the corresponding character in b. If all characters in the shorter word match the beginning of the longer word, the shorter word is considered smaller.

Note: Your implementation will be tested using a driver code. It will print true if your returned order correctly follows the alien language’s lexicographic rules; otherwise, it will print false.

code:

class Solution {
public:
    string findOrder(vector<string> &words) {
        // Get the number of words
        int n = words.size();
        
        // Adjacency list to store the graph
        map<char, vector<char>> adj;
        
        // Vectors to track characters that appear in the words
        vector<bool> freq1(26, 0); // To track characters from the first word list
        vector<bool> freq2(26, 0); // To track characters from all words
        vector<int> inDegree(26, 0); // To count the in-degrees of each character
        
        // Build the graph based on the order of characters in the words
        for(int i = 0; i < n - 1; i++) {
            int sz1 = words[i].length();
            int sz2 = words[i + 1].length();
            
            // Compare the current word with the next word
            for(int j = 0; j < sz1; j++) {
                // If the current word is longer than the next word
                if(j >= sz2) return ""; // Invalid case, return empty string
                
                // Find the first different character between the two words
                if(words[i][j] != words[i + 1][j]) {
                    // Create a directed edge in the graph
                    adj[words[i][j]].push_back(words[i + 1][j]);
                    
                    // Mark the characters as present
                    freq1[words[i][j] - 'a'] = 1;
                    freq1[words[i + 1][j] - 'a'] = 1;
                    
                    // Increment the in-degree of the second character
                    inDegree[words[i + 1][j] - 'a']++;
                    break; // No need to check further characters
                }
            }
        }
        
        string ans = ""; // Result string to store the order of characters
        queue<char> q; // Queue for characters with in-degree of 0
        int cnt = 0; // Count of unique characters
        
        // Initialize the queue with characters that have in-degree of 0
        for(int i = 0; i < 26; i++) {
            if(freq1[i]) { // Only consider characters that appear in the words
                cnt++;
                if(inDegree[i] == 0) q.push(i + 'a'); // Push character to queue if in-degree is 0
            }
        }
        
        // Process the queue using Kahn's algorithm for topological sorting
        while(!q.empty()) {
            char u = q.front(); // Get the front character
            q.pop(); // Remove it from the queue
            ans.push_back(u); // Add it to the result
            
            // Decrease in-degree for all adjacent characters
            for(auto &v : adj[u]) {
                inDegree[v - 'a']--; // Decrease in-degree
                if(inDegree[v - 'a'] == 0) { // If in-degree becomes 0, add to queue
                    q.push(v);
                }
            }
        }
        
        // If the length of the answer does not match the count of unique characters, return ""
        if(ans.length() != cnt) return "";
        
        // Check for any characters that were not included in the previous steps
        for(auto &ele : words) {
            for(auto &c : ele) freq2[c - 'a'] = 1; // Mark all characters from words
        }
        
        // Add remaining characters that are not in freq1 but are in freq2
        for(int i = 0; i < 26; i++) {
            if(freq1[i] == 0 && freq2[i] == 1) ans.push_back(i + 'a');
        }
        
        return ans; // Return the final order of characters
    }
};
