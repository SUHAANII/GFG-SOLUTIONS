question: We have a wooden plank of length n units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second, with some moving left and others right.
When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time. When an ant reaches one end of the plank at a time t, it falls out of the plank immediately.

Given an integer n and two integer arrays left[] and right[], the positions of the ants moving to the left and the right, return the time when the last ant(s) fall out of the plank

code:

class Solution {
public:
    // Function to calculate the last moment when ants fall off a stick of length n
    int getLastMoment(int n, vector<int>& left, vector<int>& right) {
        // Initialize the variable to store the maximum time
        int ans = 0;

        // Iterate through all ants moving to the left
        for (int num : left) {
            // Update ans to be the maximum of its current value and the position of the ant
            // This is because the time taken for an ant at position 'num' to fall off
            // the left end of the stick is exactly 'num' seconds
            ans = max(ans, num);
        }

        // Iterate through all ants moving to the right
        for (int num : right) {
            // Update ans to be the maximum of its current value and the time taken
            // for an ant at position 'num' to fall off the right end of the stick,
            // which is 'n - num' seconds (distance to the end of the stick)
            ans = max(ans, n - num);
        }

        // Return the maximum time calculated, which is the last moment any ant falls off
        return ans;
    }
};
