question: You are given a 2d list grid[][] of size n x m consisting of values 0 and 1.
A value of 0 means that you can enter that cell and 1 implies that entry to that cell is not allowed.
You start at the upper-left corner of the grid (1, 1) and you have to reach the bottom-right corner (n, m) such that you can only move in the right or down direction from every cell.
Your task is to calculate the total number of ways of reaching the target.

Note: The first (1, 1) and last (n, m) cell of the grid can also be 1.
It is guaranteed that the total number of ways will fit within a 32-bit integer

code:

class Solution {
public:
    int uniquePaths(vector<vector<int>> &grid) {
        // Get the number of rows (n) and columns (m) in the grid
        int n = grid.size();
        int m = grid[0].size();

        // If the starting point (0,0) or the ending point (n-1,m-1) is blocked (1), return 0
        if (grid[0][0] == 1 || grid[n - 1][m - 1] == 1)
            return 0;

        // Create a 2D vector dp to store the number of unique paths to each cell
        vector<vector<int>> dp(n, vector<int>(m, 0));
        // Starting point (0,0) has one unique path (itself)
        dp[0][0] = 1;

        // Iterate through each cell in the grid
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                // If the current cell is blocked (1), set paths to 0
                if (grid[i][j] == 1) {
                    dp[i][j] = 0;
                } else {
                    // If not in the first row, add paths from the cell above
                    if (i > 0) dp[i][j] += dp[i - 1][j];
                    // If not in the first column, add paths from the cell to the left
                    if (j > 0) dp[i][j] += dp[i][j - 1];
                }
            }
        }

        // The bottom-right cell (n-1,m-1) contains the total unique paths to reach the end
        return dp[n - 1][m - 1];
    }
};
