Question: Given an array of points where each point is represented as points[i] = [xi, yi] on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance, defined as: 

sqrt( (x2 - x1)2 + (y2 - y1)2 )

Note: You can return the k closest points in any order, driver code will sort them before printing.

code:
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        // Create a vector to store pairs of points and their squared distances from the origin
        vector<pair<vector<int>, long long>> store;

        // Iterate through each point in the input vector
        for (auto& it : points) {
            int x = it[0]; // Get the x-coordinate of the point
            int y = it[1]; // Get the y-coordinate of the point
            
            // Calculate the squared distance from the origin (0, 0)
            long long distance = (long long)x * x + (long long)y * y; 
            
            // Store the point and its distance as a pair in the store vector
            store.push_back({{x, y}, distance});
        }

        // Sort the store vector based on the distance (second element of the pair)
        sort(store.begin(), store.end(), [](const pair<vector<int>, long long>& a, const pair<vector<int>, long long>& b) {
            return a.second < b.second;  // Compare distances to sort
        });

        // Create a result vector to hold the k closest points
        vector<vector<int>> result;
        
        // Add the first k points from the sorted store vector to the result
        for (int i = 0; i < k; i++) {
            result.push_back(store[i].first); // Push the point (first element of the pair) to the result
        }

        // Return the result vector containing the k closest points
        return result;
    }
