question:
Given a number k and string s of digits denoting a positive integer, build the largest number possible by performing swap operations on the digits of s at most k times.
code:
class Solution {
public:
    // Recursive function to perform swaps and find the maximum number
    void solve(int idx, int k, string s, string &ans) {
        // Base case: if no swaps left or we've reached the end of the string
        if (k == 0 || idx == s.size()) {
            // Update the answer if the current string is greater than the current maximum
            if (s > ans) ans = s;
            return; // Exit the function
        }

        // Iterate through the string starting from the current index
        for (int i = idx; i < s.length(); i++) {
            // Check if the current character is greater than the character at index `idx`
            if (s[i] > s[idx]) {
                // Swap the characters at index `i` and `idx`
                swap(s[i], s[idx]);
                // Recursively call solve with the next index and one less swap
                solve(idx + 1, k - 1, s, ans);
                // Backtrack: swap back to restore the original string
                swap(s[i], s[idx]);
            }
            // Call solve without making a swap, moving to the next index
            solve(i + 1, k, s, ans);
        }
    }

    // Function to find the largest number after k swaps
    string findMaximumNum(string& s, int k) {
        // Initialize the answer as the original string
        string ans = s;
        // Start the recursive function
        solve(0, k, s, ans);
        // Return the maximum number found
        return ans;
    }
};
