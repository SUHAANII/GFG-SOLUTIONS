question: Given a Directed Acyclic Graph (DAG) with V nodes labeled from 0 to V-1, and a list of directed edges, count the total number of distinct paths from a given start node to a destination node. Each edge is represented as edges[i] = [u, v], indicating a directed edge from u to v.

code:

class Solution {
public:
    // Depth-first search function to count paths from 'curr' to 'dest'
    int dfs(int curr, int dest, vector<vector<int>>& adj, vector<int>& vis) {
        // If the current node is the destination, return 1 (found a valid path)
        if (curr == dest) return 1;
        
        // If this node has already been visited and computed, return the stored result
        if (vis[curr] != -1) return vis[curr];
        
        // Initialize a counter to keep track of the number of paths found
        int cnt = 0;
        
        // Explore all neighbors of the current node
        for (int nbr : adj[curr]) {
            // Recursively call dfs for each neighbor and accumulate the count of paths
            cnt += dfs(nbr, dest, adj, vis);
        }
        
        // Store the computed number of paths from 'curr' to 'dest' in the vis array
        return vis[curr] = cnt;
    }
    
    // Function to count the number of unique paths from 'src' to 'dest'
    int countPaths(vector<vector<int>>& edges, int V, int src, int dest) {
        // Create an adjacency list representation of the graph
        vector<vector<int>> adj(V);
        
        // Initialize a visited array to store computed results for nodes
        vector<int> vis(V, -1);
        
        // Populate the adjacency list from the edges input
        for (auto edge : edges) {
            int u = edge[0]; // Starting node of the edge
            int v = edge[1]; // Ending node of the edge
            
            // Add the directed edge from u to v in the adjacency list
            adj[u].push_back(v);
        }
        
        // Start DFS from the source node 'src' to count paths to 'dest'
        return dfs(src, dest, adj, vis);
    }
};
