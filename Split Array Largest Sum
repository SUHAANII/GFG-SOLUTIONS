QUESTION:Given an array arr[] and an integer k, divide the array into k contiguous subarrays such that the maximum sum among these subarrays is minimized. Find this minimum possible maximum sum.

code:

class Solution {
public:
    // Helper function to determine if we can split the array into k or fewer parts
    // where each part's sum does not exceed 'sum'.
    bool f(int sum, vector<int>& arr, int k) {
        int s = 0; // Initialize the current sum of the current part.
        
        // Iterate through each element in the array.
        for (int i : arr) {
            s += i; // Add the current element to the current sum.

            // If the current sum exceeds the allowed 'sum', we need to split.
            if (s > sum) {
                k--; // Decrease the count of allowed parts.
                s = i; // Start a new part with the current element.
            }
        }

        // Return true if we can split into k parts and the last part's sum is within the limit.
        return (k > 0 && s <= sum);
    }

    // Main function to split the array into k parts.
    int splitArray(vector<int>& arr, int k) {
        // Find the maximum element in the array to set the lower bound.
        int s = *max_element(arr.begin(), arr.end());
        
        // Calculate the total sum of the array to set the upper bound.
        int e = accumulate(arr.begin(), arr.end(), 0);
        
        int ans = -1; // Variable to store the result (minimum largest sum).

        // Binary search to find the minimum largest sum possible.
        while (s <= e) {
            int mid = s + (e - s) / 2; // Calculate the middle point.

            // Check if we can split the array with the current mid as the largest sum.
            if (f(mid, arr, k)) {
                ans = mid; // If yes, record the answer.
                e = mid - 1; // Try for a smaller largest sum.
            } else {
                s = mid + 1; // Increase the lower bound if we can't split.
            }
        }
        
        return ans; // Return the minimum largest sum found.
    }
};
