Question:  Given a sorted array arr[] and a target value, the task is to count triplets (i, j, k) of valid indices, such that arr[i] + arr[j] + arr[k] = target and i < j < k
code:

#include <vector>
using namespace std;

class Solution {
public:
    int countTriplets(vector<int> &arr, int target) {
        int ans = 0; // Variable to store the count of valid triplets
        int n = arr.size(); // Get the size of the input array
        
        // Ensure there are at least 3 elements to form a triplet
        if (n < 3) return 0;

        // Iterate through each element in the array as the first element of the triplet
        for (int i = 0; i < n - 2; i++) {
            int left = i + 1; // Initialize left pointer just after the current element
            int right = n - 1; // Initialize right pointer at the end of the array

            // Use two-pointer technique to find pairs that, along with arr[i], form valid triplets
            while (left < right) {
                // Calculate the sum of the current triplet
                int sum = arr[i] + arr[left] + arr[right];

                // If the sum is less than the target
                if (sum < target) {
                    // All elements from left to right can form a valid triplet with arr[i]
                    ans += (right - left); // Count all valid pairs (left, left+1), ..., (left, right)
                    left++; // Move the left pointer to the right to check for more pairs
                } else {
                    // If the sum is greater than or equal to the target, move the right pointer left
                    right--; // Decrease the sum by moving the right pointer left
                }
            }
        }
        return ans; // Return the total count of valid triplets
    }
};
