Question: You are given the head of a singly linked list. Your task is to determine if the linked list contains a loop. A loop exists in a linked list if the next pointer of the last node points to any other node in the list (including itself), rather than being null.

Custom Input format:
A head of a singly linked list and a pos (1-based index) which denotes the position of the node to which the last node points to. If pos = 0, it means the last node points to null, indicating there is no loop.

code: 

class Solution {
public:
    // Function to check if the linked list has a loop.
    bool detectLoop(Node* head) {
        // Check if the head of the linked list is NULL (empty list)
        if (head == NULL) return false;

        // Initialize two pointers, fast and slow, both starting at the head of the list
        Node* fast = head; 
        Node* slow = head;

        // Loop until fast pointer reaches the end of the list or the next node is NULL
        while (fast && fast->next) {
            // Move slow pointer one step forward
            slow = slow->next;
            // Move fast pointer two steps forward
            fast = fast->next->next;

            // Check if the fast pointer has caught up to the slow pointer
            if (fast == slow) {
                // A loop is detected if both pointers meet
                return true;
            }
        }

        // If we exit the loop, no loop was found in the linked list
        return false;
    }
};
