Question:  Given an array arr[] and a number target, find a pair of elements (a, b) in arr[], where a<=b whose sum is closest to target.
Note: Return the pair in sorted order and if there are multiple such pairs return the pair with maximum absolute difference. If no such pair exists return an empty array.

code: 

class Solution {
public:
    vector<int> sumClosest(vector<int>& arr, int target) {
        // If the array has less than 2 elements, return an empty vector
        if(arr.size() < 2) return {}; 
        
        int n = arr.size(); // Get the size of the array
        sort(arr.begin(), arr.end()); // Sort the array to use two-pointer technique
        
        int left = 0; // Initialize the left pointer at the start of the array
        int right = n - 1; // Initialize the right pointer at the end of the array
        vector<int> ans; // Vector to store the closest pair
        int closeSum = INT_MAX; // Initialize the closest sum to maximum integer value
        int maxDiff = INT_MIN; // Initialize the maximum difference to minimum integer value
        
        // Loop until the left pointer is less than the right pointer
        while(left < right) {
            int sum = arr[left] + arr[right]; // Calculate the sum of the elements at the two pointers
            
            // Check if the current sum is closer to the target than the previously found closest sum
            if(abs(sum - target) < abs(closeSum - target)) {
                closeSum = sum; // Update the closest sum
                ans = {arr[left], arr[right]}; // Update the answer with the current pair
                maxDiff = arr[right] - arr[left]; // Update the maximum difference
            } 
            // If the current sum is equally close to the target as the closest sum found so far
            else if(abs(sum - target) == abs(closeSum - target)) {
                int diff = arr[right] - arr[left]; // Calculate the difference between the two numbers
                // If the current difference is greater than the maximum difference found so far
                if(diff > maxDiff) {
                    ans = {arr[left], arr[right]}; // Update the answer with the current pair
                    maxDiff = diff; // Update the maximum difference
                }
            }
            
            // Adjust pointers based on the comparison of sum and target
            if(sum < target) {
                left++; // Move the left pointer to the right to increase the sum
            } else {
                right--; // Move the right pointer to the left to decrease the sum
            }
        }
        
        return ans; // Return the pair of numbers whose sum is closest to the target
    }
};
