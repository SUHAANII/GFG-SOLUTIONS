question: Given a string s consisting of lowercase English letters and an integer k, your task is to remove exactly k characters from the string. The resulting string must be the largest possible in lexicographical  order, while maintain the relative order of the remaining characters.

code:

class Solution {
public:
    // Function to find the largest lexicographical subsequence of a string after removing k characters
    string maxSubseq(string& s, int k) {
        stack<char> st;  // Stack to build the largest lexicographical sequence
        int cnt = 0;      // Count of characters removed so far
        int n = s.length(); // Get the length of the input string
        
        // Iterate through each character in the string
        for(int i = 0; i < n; ++i) {
            // While we can remove characters (cnt < k), and the top of the stack is smaller than the current character
            while(!st.empty() && cnt < k && st.top() < s[i]) {
                st.pop();  // Remove the smaller character to maximize lexicographical order
                ++cnt;     // Increment the removal count
            }
            st.push(s[i]); // Push the current character onto the stack
        }
        
        // If we still need to remove more characters, remove from the end (smallest remaining)
        while(cnt < k && !st.empty()) {
            st.pop(); // Remove the top character from the stack
            ++cnt;    // Increment the removal count
        }
        
        // Build the result string from the stack (which is in reverse order)
        string ans = "";
        while(!st.empty()) {
            ans.push_back(st.top()); // Add the top character of the stack to the result
            st.pop(); // Remove the top character from the stack
        }
        
        reverse(ans.begin(), ans.end());  // Reverse the result to restore original order
        
        return ans; // Return the largest lexicographical subsequence
    }
};
