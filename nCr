question: Given two integer values n and r, the task is to find the value of Binomial Coefficient nCr

A binomial coefficient nCr can be defined as the coefficient of xr in the expansion of (1 + x)n that gives the number of ways to choose r objects from a set of n objects without considering the order.
The binomial coefficient nCr is calculated as : C(n,r) = n! / r! * (n-r) !
Note: If r is greater than n, return 0.
It is guaranteed that the value of nCr will fit within a 32-bit integer.

code:
class Solution {
public:
    // Function to calculate nCr (combinations of n items taken r at a time)
    int nCr(int n, int r) {
        // If r is greater than n, combinations are not possible
        if (r > n) 
            return 0;

        // Variable to store the result of nCr
        long long ans = 1;

        // Calculate nCr using the formula:
        // nCr = n! / (r! * (n - r)!)
        // This is optimized to avoid large factorials:
        // nCr = (n * (n - 1) * ... * (n - r + 1)) / (r * (r - 1) * ... * 1)
        for (int i = 1; i <= r; i++) {
            // Update ans by multiplying the current term and dividing by i
            // This effectively calculates the next term in the combination formula
            ans = (ans * (n - r + i)) / i;
        }

        // Return the final result as an integer
        return (int)ans;
    }
};
